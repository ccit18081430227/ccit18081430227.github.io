{"meta":{"title":"吴岩","subtitle":"","description":"","author":"吴岩","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"LED","slug":"post-LED","date":"2020-06-26T12:56:28.000Z","updated":"2020-06-26T12:58:36.668Z","comments":true,"path":"2020/06/26/post-LED/","link":"","permalink":"http://yoursite.com/2020/06/26/post-LED/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; //选择设备 var connected_server; //连接设备 var connected=false;//连接状态 var services_discovered=false;//发现设备状态 // 添加服务和特性状态变量 var has_accelerometer_service = false; //加速度服务状态 var has_accelerometer_data = false; //加速度特性状态 var has_led_service = false;//led服务状态 var has_led_matrix_state = false; //led控制特性状态 var has_device_information_service = false; //设备信息服务状态 var has_model_name_string = false; //设备信息特性状态 var has_temperature_service =false; //温度服务状态 var has_tem_temperature = false; //温度特性状态 // 服务 UUIDs ACCELEROMETER_SERVICE = 'e95d0753-251d-470a-a062-fa1922dfa9a8'; LED_SERVICE = 'e95dd91d-251d-470a-a062-fa1922dfa9a8'; DEVICE_INFORMATION_SERVICE = '0000180a-0000-1000-8000-00805f9b34fb'; TEMPERATURE_SERVICE = 'e95d6100-251d-470a-a062-fa1922dfa9a8'; // 特性 UUIDs ACCELEROMETER_DATA = 'e95dca4b-251d-470a-a062-fa1922dfa9a8'; LED_MATRIX_STATE = 'e95d7b77-251d-470a-a062-fa1922dfa9a8'; MODEL_NUMBER_STRING = '00002a24-0000-1000-8000-00805f9b34fb'; TEM_TEMPERATURE = 'e95d1b25-251d-470a-a062-fa1922dfa9a8'; // 添加特性变量 var led_matrix_state; var model_number_string; var accelerometer_data; var tem_temperature; //添加服务，特性相关参数 var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices()// 断开连接 &#123; console.log(\"discoverOrdisconnectDevices\"); if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected()//连接 &#123; console.log(\"onDisconnected\"); resetUI(); &#125; //function input.temperature(): number; function discoverDevices()// 搜索设备函数 &#123; console.log(\"discoverDevices\"); var options = &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] //在第5节课上添加 &#125; //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) .then(device =&gt; &#123; console.log('&gt; Name:' + device.name); console.log('&gt; Id:' + device.id); console.log('&gt; Connected:' + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); &#125;) .catch(error =&gt; &#123; alert('ERROR' +error); console.log('ERROR' +error); &#125;); &#125; function connect() //连接函数 &#123; console.log(\"connecting\"); selected_device.gatt.connect() .then( function (server) &#123; console.log(\"Connected to\" + server.device.id); console.log(\"Connected \" + server.connected); selected_device.addEventListener('gattserverdisconnected',onDisconnected); connected_server =server; discoverSvcsAndChars(); //在第5课基础上添加的函数 setConnectedStatus(true); &#125;, function (error) &#123; console.log(\"ERROR:could not connct-\" + error); alert(\"ERROR:could not connct-\" + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status)//设置连接状态 &#123; connected=status; document.getElementById('status_connected').innerHTML = status; if(status==true) &#123; document.getElementById('btn_scan').innerHTML = \"Disconnect\"; &#125; else &#123; document.getElementById('btn_scan').innerHTML = \"Discover Devices\"; &#125; &#125; function setDiscoveryStatus(status)//设置发现状态 &#123; services_discovered=status; document.getElementById('status_discovered').innerHTML=status; &#125; function resetUI() //重置页面 &#123; setConnectedStatus(false); &#125; function discoverSvcsAndChars() //发现服务和特性 &#123; console.log(\"discoverSvcsAndChars server=\" + connected_server); connected_server.getPrimaryServices() .then(services =&gt; &#123; has_accelerometer_service = false; has_led_service = false; has_device_information_service = false; has_temperature_service= false; services_discovered = 0; service_count = services.length; console.log(\"Got \" + service_count + \" services\"); services.forEach(service =&gt; &#123; if (service.uuid == ACCELEROMETER_SERVICE) &#123; has_accelerometer_service = true; &#125; if (service.uuid == LED_SERVICE) &#123; has_led_service = true; &#125; if (service.uuid == DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service = true; &#125; if (service.uuid == TEMPERATURE_SERVICE) //温度 &#123; has_temperature_service = true; &#125; console.log('Getting Characteristics for service ' + service.uuid); service.getCharacteristics() .then(characteristics =&gt; &#123; console.log('&gt; Service: ' + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; &#123; characteristics_discovered++; console.log('&gt;&gt; Characteristic: ' + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) &#123; accelerometer_data = characteristic; has_accelerometer_data = true; &#125; if (characteristic.uuid == LED_MATRIX_STATE) &#123; led_matrix_state = characteristic; has_led_matrix_state = true; &#125; if (characteristic.uuid == MODEL_NUMBER_STRING) &#123; model_number_string = characteristic; has_model_name_string = true; &#125; if(characteristic.uuid == TEM_TEMPERATURE) //温度 &#123; tem_temperature = characteristic; has_tem_temperature = true; &#125; if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) &#123; console.log(\"FINISHED DISCOVERY\"); setDiscoveryStatus(true); //setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i=0,j=0; function randomLEDs(ct) //控制led &#123; console.log(\"randomLEDs\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_led_service) &#123; alert(\"Error: The connected device does not contain the LED service\"); return; &#125; if (!has_led_matrix_state) &#123; alert(\"Error: The connected device does not contain the LED matrix state characteristic\"); return; &#125; var led_array=[]; if(ct==0) &#123; led_array[0] = 1&lt;&lt;i; led_array[1] = 1&lt;&lt;i; led_array[2] = 1&lt;&lt;i; led_array[3] = 1&lt;&lt;i; led_array[4] = 1&lt;&lt;i; i++; if(i==5)i=0; &#125; else if(ct==1) &#123; led_array[0] = 0; led_array[1] = 0; led_array[2] = 0; led_array[3] = 0; led_array[4] = 0; led_array[j] = 31; j++; if(j==5)j=0; &#125; // Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 /*led_array[0] =10; led_array[1] = 31; led_array[2] = 31; led_array[3] = 14; led_array[4] = 4;*/ /*led_array[0] = 31; led_array[1] = 17; led_array[2] = 17; led_array[3] = 17; led_array[4] = 31; */ var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ =&gt; &#123; console.log('LED matrix state changed'); &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; function readModelNumber() // 蓝牙信息服务 &#123; console.log(\"readModelNumber\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_device_information_service) &#123; alert(\"Error: The connected device does not contain the device information service\"); return; &#125; if (!has_model_name_string) &#123; alert(\"Error: The connected device does not contain the model name string characteristic\"); return; &#125; model_number_string.readValue() .then(value =&gt; &#123; data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(\"utf-8\").decode(data); console.log(model_number_string); document.getElementById(\"model_number\").innerHTML = model_number_string; &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; function accelerometer() //加速度传感器 &#123; console.log(\"accelerometer\"); // state validation if (!connected) &#123; alert(\"Error: Discover and connect to a device before using this function\"); return; &#125; if (!services_discovered) &#123; alert(\"Error: Service discovery has not yet completed\"); return; &#125; if (!has_accelerometer_service) &#123; alert(\"Error: The connected device does not contain the accelerometer service\"); return; &#125; if (!has_accelerometer_data) &#123; alert(\"Error: The connected device does not contain the accelerometer_data characteristic\"); return; &#125; accelerometer_data.readValue() .then(value =&gt; &#123; buffer = value.buffer; dataview = new DataView(buffer); X = dataview.getUint16(0, true); Y = dataview.getUint16(2, true); Z = dataview.getUint16(4, true); console.log(\"X=\" + X + \", Y=\" + Y + \", Z+\" + Z); document.getElementById(\"ac_data\").innerHTML = \"X=\" + X + \", Y=\" + Y + \",Z=\" + Z; &#125;) .catch(error =&gt; &#123; console.log('Error: ' + error); alert('Error: ' + error); return; &#125;); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;/h2&gt; &lt;table border=\"1\"&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=\"status_connected\"&gt; false &lt;/td&gt; &lt;td id=\"status_discovered\"&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;h2&gt; Device Discovery or Disconnect &lt;/h2&gt; &lt;button id = \"btn_scan\" onclick=\"discoverOrdisconnectDevices()\"&gt;Start scan&lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=\"btn_write\" onclick=\"randomLEDs(0)\"&gt;控制led行&lt;/button&gt; &lt;button id=\"btu_write\" onclick=\"randomLEDs(1)\"&gt;控制led列&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model number&lt;/h3&gt; &lt;button id=\"btn_read\" onclick=\"readModelNumber()\"&gt;Read Model number&lt;/button&gt; &lt;div id=\"model_number\"&gt;&lt;/div&gt; &lt;h3&gt;accelerometer_data&lt;/h3&gt; &lt;button id=\"btn_readAC\" onclick=\"accelerometer()\"&gt;Read accelerometer_data&lt;/button&gt; &lt;div id=\"ac_data\"&gt;&lt;/div&gt; &lt;hr&gt; &lt;/body&gt;&lt;/html&gt; 使用数组控制LED小灯","categories":[],"tags":[]},{"title":"矩阵控制","slug":"post-矩阵控制-md","date":"2020-06-26T12:55:22.000Z","updated":"2020-06-26T13:01:13.587Z","comments":true,"path":"2020/06/26/post-矩阵控制-md/","link":"","permalink":"http://yoursite.com/2020/06/26/post-%E7%9F%A9%E9%98%B5%E6%8E%A7%E5%88%B6-md/","excerpt":"","text":"小灯高电平灭，低电平亮首先定义一个数组用来存放按钮代码如下控制单个小灯亮暗 &lt;button id=\"led00\" onclick=\"led00()\"&gt;第一行第一列&lt;/button&gt; &lt;button id=\"led01\" onclick=\"led01()\"&gt;第一行第二列&lt;/button&gt; &lt;button id=\"led02\" onclick=\"led02()\"&gt;第一行第三列&lt;/button&gt; &lt;button id=\"led03\" onclick=\"led03()\"&gt;第一行第四列&lt;/button&gt; &lt;button id=\"led04\" onclick=\"led04()\"&gt;第一行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=\"led10\" onclick=\"led10()\"&gt;第二行第一列&lt;/button&gt; &lt;button id=\"led11\" onclick=\"led11()\"&gt;第二行第二列&lt;/button&gt; &lt;button id=\"led12\" onclick=\"led12()\"&gt;第二行第三列&lt;/button&gt; &lt;button id=\"led13\" onclick=\"led13()\"&gt;第二行第四列&lt;/button&gt; &lt;button id=\"led14\" onclick=\"led14()\"&gt;第二行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=\"led20\" onclick=\"led20()\"&gt;第三行第一列&lt;/button&gt; &lt;button id=\"led21\" onclick=\"led21()\"&gt;第三行第二列&lt;/button&gt; &lt;button id=\"led22\" onclick=\"led22()\"&gt;第三行第三列&lt;/button&gt; &lt;button id=\"led23\" onclick=\"led23()\"&gt;第三行第四列&lt;/button&gt; &lt;button id=\"led24\" onclick=\"led24()\"&gt;第三行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=\"led30\" onclick=\"led30()\"&gt;第四行第一列&lt;/button&gt; &lt;button id=\"led31\" onclick=\"led31()\"&gt;第四行第二列&lt;/button&gt; &lt;button id=\"led32\" onclick=\"led32()\"&gt;第四行第三列&lt;/button&gt; &lt;button id=\"led33\" onclick=\"led33()\"&gt;第四行第四列&lt;/button&gt; &lt;button id=\"led34\" onclick=\"led34()\"&gt;第四行第五列&lt;/button&gt; &lt;br&gt; &lt;button id=\"led40\" onclick=\"led40()\"&gt;第五行第一列&lt;/button&gt; &lt;button id=\"led41\" onclick=\"led41()\"&gt;第五行第二列&lt;/button&gt; &lt;button id=\"led42\" onclick=\"led42()\"&gt;第五行第三列&lt;/button&gt; &lt;button id=\"led43\" onclick=\"led43()\"&gt;第五行第四列&lt;/button&gt; &lt;button id=\"led44\" onclick=\"led44()\"&gt;第五行第五列&lt;/button&gt;每个函数通过调用子函数来控制小灯具体代码如下function led00() //第一行 &#123; if(c[0]==0) &#123; led[0]=led[0]|(1&lt;&lt;4); c[0]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;4)); c[0]=0; &#125; randLED(); &#125; function led01() &#123; if(c[1]==0) &#123; led[0]=led[0]|(1&lt;&lt;3); c[1]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;3)); c[1]=0; &#125; randLED(); &#125; function led02() &#123; if(c[2]==0) &#123; led[0]=led[0]|(1&lt;&lt;2); c[2]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;2)); c[2]=0; &#125; randLED(); &#125; function led03() &#123; if(c[3]==0) &#123; led[0]=led[0]|(1&lt;&lt;1); c[3]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;1)); c[3]=0; &#125; randLED(); &#125; function led04() &#123; if(c[4]==0) &#123; led[0]=led[0]|(1&lt;&lt;0); c[4]=1; &#125; else&#123; led[0]=led[0]&amp;(~(1&lt;&lt;0)); c[4]=0; &#125; randLED(); &#125; function led10() //第二行 &#123; if(c[5]==0) &#123; led[1]=led[1]|(1&lt;&lt;4); c[5]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;4)); c[5]=0; &#125; randLED(); &#125; function led11() &#123; if(c[6]==0) &#123; led[1]=led[1]|(1&lt;&lt;3); c[6]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;3)); c[6]=0; &#125; randLED(); &#125; function led12() &#123; if(c[7]==0) &#123; led[1]=led[1]|(1&lt;&lt;2); c[7]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;2)); c[7]=0; &#125; randLED(); &#125; function led13() &#123; if(c[8]==0) &#123; led[1]=led[1]|(1&lt;&lt;1); c[8]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;1)); c[8]=0; &#125; randLED(); &#125; function led14() &#123; if(c[9]==0) &#123; led[1]=led[1]|(1&lt;&lt;0); c[9]=1; &#125; else&#123; led[1]=led[1]&amp;(~(1&lt;&lt;0)); c[9]=0; &#125; randLED(); &#125; function led20() //第三行 &#123; if(c[10]==0) &#123; led[2]=led[2]|(1&lt;&lt;4); c[10]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;4)); c[10]=0; &#125; randLED(); &#125; function led21() &#123; if(c[11]==0) &#123; led[2]=led[2]|(1&lt;&lt;3); c[11]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;3)); c[11]=0; &#125; randLED(); &#125; function led22() &#123; if(c[12]==0) &#123; led[2]=led[2]|(1&lt;&lt;2); c[12]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;2)); c[12]=0; &#125; randLED(); &#125; function led23() &#123; if(c[13]==0) &#123; led[2]=led[2]|(1&lt;&lt;1); c[13]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;1)); c[13]=0; &#125; randLED(); &#125; function led24() &#123; if(c[14]==0) &#123; led[2]=led[2]|(1&lt;&lt;0); c[14]=1; &#125; else&#123; led[2]=led[2]&amp;(~(1&lt;&lt;0)); c[14]=0; &#125; randLED(); &#125; function led30() //第四行 &#123; if(c[15]==0) &#123; led[3]=led[3]|(1&lt;&lt;4); c[15]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;4)); c[15]=0; &#125; randLED(); &#125; function led31() &#123; if(c[16]==0) &#123; led[3]=led[3]|(1&lt;&lt;3); c[16]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;3)); c[16]=0; &#125; randLED(); &#125; function led32() &#123; if(c[17]==0) &#123; led[3]=led[3]|(1&lt;&lt;2); c[17]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;2)); c[17]=0; &#125; randLED(); &#125; function led33() &#123; if(c[18]==0) &#123; led[3]=led[3]|(1&lt;&lt;1); c[18]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;1)); c[18]=0; &#125; randLED(); &#125; function led34() &#123; if(c[19]==0) &#123; led[3]=led[3]|(1&lt;&lt;0); c[19]=1; &#125; else&#123; led[3]=led[3]&amp;(~(1&lt;&lt;0)); c[19]=0; &#125; randLED(); &#125; function led40() //第五行 &#123; if(c[20]==0) &#123; led[4]=led[4]|(1&lt;&lt;4); c[20]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;4)); c[20]=0; &#125; randLED(); &#125; function led41() &#123; if(c[21]==0) &#123; led[4]=led[4]|(1&lt;&lt;3); c[21]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;3)); c[21]=0; &#125; randLED(); &#125; function led42() &#123; if(c[22]==0) &#123; led[4]=led[4]|(1&lt;&lt;2); c[22]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;2)); c[22]=0; &#125; randLED(); &#125; function led43() &#123; if(c[23]==0) &#123; led[4]=led[4]|(1&lt;&lt;1); c[23]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;1)); c[23]=0; &#125; randLED(); &#125; function led44() &#123; if(c[24]==0) &#123; led[4]=led[4]|(1&lt;&lt;0); c[24]=1; &#125; else&#123; led[4]=led[4]&amp;(~(1&lt;&lt;0)); c[24]=0; &#125; randLED(); &#125; Share","categories":[],"tags":[]},{"title":"矩阵控制灯","slug":"矩阵控制灯","date":"2020-06-24T13:07:31.000Z","updated":"2020-06-24T13:10:56.747Z","comments":true,"path":"2020/06/24/矩阵控制灯/","link":"","permalink":"http://yoursite.com/2020/06/24/%E7%9F%A9%E9%98%B5%E6%8E%A7%E5%88%B6%E7%81%AF/","excerpt":"","text":"本章任务 使用网页控制板子上的任意一盏灯 相关代码修改如下： 首先，要想控制板上任意一盏灯首先要添加25个按钮俩控制板子上的灯 123456789101112131415161718192021222324252627282930&lt;h3&gt;控制单个小灯亮暗&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;led00&quot; onclick&#x3D;&quot;led00()&quot;&gt;第一行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led01&quot; onclick&#x3D;&quot;led01()&quot;&gt;第一行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led02&quot; onclick&#x3D;&quot;led02()&quot;&gt;第一行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led03&quot; onclick&#x3D;&quot;led03()&quot;&gt;第一行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led04&quot; onclick&#x3D;&quot;led04()&quot;&gt;第一行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led10&quot; onclick&#x3D;&quot;led10()&quot;&gt;第二行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led11&quot; onclick&#x3D;&quot;led11()&quot;&gt;第二行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led12&quot; onclick&#x3D;&quot;led12()&quot;&gt;第二行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led13&quot; onclick&#x3D;&quot;led13()&quot;&gt;第二行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led14&quot; onclick&#x3D;&quot;led14()&quot;&gt;第二行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led20&quot; onclick&#x3D;&quot;led20()&quot;&gt;第三行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led21&quot; onclick&#x3D;&quot;led21()&quot;&gt;第三行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led22&quot; onclick&#x3D;&quot;led22()&quot;&gt;第三行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led23&quot; onclick&#x3D;&quot;led23()&quot;&gt;第三行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led24&quot; onclick&#x3D;&quot;led24()&quot;&gt;第三行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led30&quot; onclick&#x3D;&quot;led30()&quot;&gt;第四行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led31&quot; onclick&#x3D;&quot;led31()&quot;&gt;第四行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led32&quot; onclick&#x3D;&quot;led32()&quot;&gt;第四行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led33&quot; onclick&#x3D;&quot;led33()&quot;&gt;第四行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led34&quot; onclick&#x3D;&quot;led34()&quot;&gt;第四行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led40&quot; onclick&#x3D;&quot;led40()&quot;&gt;第五行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led41&quot; onclick&#x3D;&quot;led41()&quot;&gt;第五行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led42&quot; onclick&#x3D;&quot;led42()&quot;&gt;第五行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led43&quot; onclick&#x3D;&quot;led43()&quot;&gt;第五行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led44&quot; onclick&#x3D;&quot;led44()&quot;&gt;第五行第五列&lt;&#x2F;button&gt; 每个按钮控制一个小灯 Javascriptfunction led00() &#x2F;&#x2F;第一行 &#123; if(c[0]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;4); c[0]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;4)); c[0]&#x3D;0; &#125; randLED(); &#125; function led01() &#123; if(c[1]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;3); c[1]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;3)); c[1]&#x3D;0; &#125; randLED(); &#125; function led02() &#123; if(c[2]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;2); c[2]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;2)); c[2]&#x3D;0; &#125; randLED(); &#125; function led03() &#123; if(c[3]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;1); c[3]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;1)); c[3]&#x3D;0; &#125; randLED(); &#125; function led04() &#123; if(c[4]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;0); c[4]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;0)); c[4]&#x3D;0; &#125; randLED(); &#125; function led10() &#x2F;&#x2F;第二行 &#123; if(c[5]&#x3D;&#x3D;0) &#123; led[1]&#x3D;led[1]|(1&lt;&lt;4); c[5]&#x3D;1; &#125; else&#123; led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;4)); c[5]&#x3D;0; &#125; randLED(); &#125; function led11() &#123; if(c[6]&#x3D;&#x3D;0) &#123; led[1]&#x3D;led[1]|(1&lt;&lt;3); c[6]&#x3D;1; &#125; else&#123; led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;3)); c[6]&#x3D;0; &#125; randLED(); &#125; function led12() &#123; if(c[7]&#x3D;&#x3D;0) &#123; led[1]&#x3D;led[1]|(1&lt;&lt;2); c[7]&#x3D;1; &#125; function led20() &#x2F;&#x2F;第三行 &#123; if(c[10]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;4); c[10]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;4)); c[10]&#x3D;0; &#125; randLED(); &#125; function led21() &#123; if(c[11]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;3); c[11]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;3)); c[11]&#x3D;0; &#125; randLED(); &#125; function led22() &#123; if(c[12]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;2); c[12]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;2)); c[12]&#x3D;0; &#125; randLED(); &#125; function led23() &#123; if(c[13]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;1); c[13]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;1)); c[13]&#x3D;0; &#125; randLED(); &#125; function led24() &#123; if(c[14]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;0); c[14]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;0)); c[14]&#x3D;0; &#125; randLED(); &#125; function led30() &#x2F;&#x2F;第四行 &#123; if(c[15]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;4); c[15]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;4)); c[15]&#x3D;0; &#125; randLED(); &#125; function led31() &#123; if(c[16]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;3); c[16]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;3)); c[16]&#x3D;0; &#125; randLED(); &#125; function led32() &#123; if(c[17]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;2); c[17]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;2)); c[17]&#x3D;0; &#125; randLED(); &#125; function led33() &#123; if(c[18]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;1); c[18]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;1)); c[18]&#x3D;0; &#125; randLED(); &#125; function led34() &#123; if(c[19]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;0); c[19]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;0)); c[19]&#x3D;0; &#125; randLED(); &#125; function led40() &#x2F;&#x2F;第五行 &#123; if(c[20]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;4); c[20]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;4)); c[20]&#x3D;0; &#125; randLED(); &#125; function led41() &#123; if(c[21]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;3); c[21]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;3)); c[21]&#x3D;0; &#125; randLED(); &#125; function led42() &#123; if(c[22]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;2); c[22]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;2)); c[22]&#x3D;0; &#125; randLED(); &#125; function led43() &#123; if(c[23]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;1); c[23]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;1)); c[23]&#x3D;0; &#125; randLED(); &#125; function led44() &#123; if(c[24]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;0); c[24]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;0)); c[24]&#x3D;0; &#125; randLED(); &#125; 相关现象","categories":[],"tags":[]},{"title":"启用通知","slug":"启用通知","date":"2020-06-23T12:47:38.000Z","updated":"2020-06-24T13:07:01.581Z","comments":true,"path":"2020/06/23/启用通知/","link":"","permalink":"http://yoursite.com/2020/06/23/%E5%90%AF%E7%94%A8%E9%80%9A%E7%9F%A5/","excerpt":"","text":"本章任务 在网页上显示加速度计得三轴值 了解 Micro:bit采用的是Freescale MMA8653FC 三轴加速度传感器，I2C接口与外部通信，10位ADC精度，可设置量程为±2g，±4g，±8g，数据最大更新速率为800Hz。 当Micro:bit处于静止或匀速运动状态时，加速计仅检测到重力加速度；将Micro:bit轻微甩动，加速计检测到甩动的加速度远小于重力加速度，可忽略不计，因此，在使用Micro:bit过程中，主要是检测当姿态变化时，重力加速度在x,y,z轴上的变化，并在此基础上应用。 相关代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 &lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var connected_server; var connected &#x3D; false; var services_discovered &#x3D; false; &#x2F;&#x2F;在第5课上添加 var notifications_enabled &#x3D; false; &#x2F;&#x2F;在第5课上添加以下内容 var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false; var has_led_matrix_state &#x3D; false; var has_device_information_service &#x3D; false; var has_model_name_string &#x3D; false; &#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; &#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; &#x2F;&#x2F; cached characteristics var led_matrix_state; var model_number_string; var accelerometer_data; &#x2F;&#x2F; var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices() &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); if (!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function setNotificationsStatus(status) &#123; notifications_enabled &#x3D; status; document.getElementById(&#39;status_notifications&#39;).innerHTML &#x3D; status; &#125; Javascriptfunction onDisconnected() &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125; function onAccelerometerData(event) &#123; console.log(&quot;onAccelerometerData&quot;); buffer &#x3D; event.target.value.buffer; dataview &#x3D; new DataView(buffer); X &#x3D; dataview.getUint16(0, true); Y &#x3D; dataview.getUint16(2, true); Z &#x3D; dataview.getUint16(4, true); console.log(&quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;accelerometer_data&quot;).innerHTML &#x3D; &quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z&#x3D;&quot; + Z; &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; navigator.bluetooth.requestDevice(options) .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt; &#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; + error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); selected_device.addEventListener( &#39;gattserverdisconnected&#39;,onDisconnected); &#x2F;&#x2F; 在第4课基础上添加的函数 connected_server &#x3D; server; discoverSvcsAndChars(); &#x2F;&#x2F;&#x2F;&#x2F;在第5课基础上添加的函数 setConnectedStatus(true); &#x2F;&#x2F; 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#125;, function (error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#x2F;&#x2F; 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#125; ); &#125; function setConnectedStatus(status) &#x2F;&#x2F; 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#123; connected &#x3D; status; document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status; if (status &#x3D;&#x3D; true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered &#x3D; status; document.getElementById(&#39;status_discovered&#39;).innerHTML &#x3D; status; &#125; function resetUI() &#x2F;&#x2F; 在第4课基础上添加的函数 &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#x2F;&#x2F; 在第5课基础上添加的函数 setNotificationsStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices()&#x2F;&#x2F;调用函数去获取BBC上的相应的服务 .then(services &#x3D;&gt; &#x2F;&#x2F;对服务进行判断 &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; &#x2F;&#x2F;发现BBC板服务的个数 console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#x2F;&#x2F;对已发现的所有服务进行判断 &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() &#x2F;&#x2F;获取相应服务的所有特性 .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; &#x2F;&#x2F;发现一个就加一 characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; &#x2F;&#x2F;特性的个数 characteristics.forEach(characteristic &#x3D;&gt; &#x2F;&#x2F;对已发现的特性进行判断 &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; &#x2F;&#x2F;把发现的相应特性保存到相应变量中 has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_name_string &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F;setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; function randomLEDs()&#x2F;&#x2F;第六节课添加 &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F;state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return &#125; if (!services_discovered)&#x2F;&#x2F;有没有发现所有服务 &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return &#125; if (!has_led_matrix_state)&#x2F;&#x2F;led灯的特性有没有被发现的一个标记变量 &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array &#x3D; [0, 0, 0, 0, 0]; &#x2F;&#x2F;math.random():0~1 math.floor(x):返回小于等于x的最大整数 led_array[0] &#x3D; Math.floor(Math.random() * 32); led_array[1] &#x3D; 1; led_array[2] &#x3D; 2; led_array[3] &#x3D; 3; led_array[4] &#x3D; 4; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer)&#x2F;&#x2F;控制板子上灯亮灭 .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; +error); return; &#125;); &#125;function readModelNumber() &#123; console.log(&quot;readModelNumber&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value &#x3D;&gt; &#123; data &#x3D; new Uint8Array(value.buffer); model_number_string &#x3D; new TextDecoder(&quot;utf8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125;function toggleAccelerometerNotifications() &#123; console.log(&quot;toggleAccelerometerNotifications&quot;); if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_accelerometer_service) &#123; alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; &#125; if (!has_accelerometer_data) &#123; alert(&quot;Error: The connected device does not contain the accelerometer data characteristic&quot;); return; &#125; if (!notifications_enabled) &#123; accelerometer_data.startNotifications() .then(_ &#x3D;&gt; &#123; console.log(&#39;accelerometer notifications started&#39;); setNotificationsStatus(true); accelerometer_data.addEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; else &#123; accelerometer_data.stopNotifications() .then(_ &#x3D;&gt; &#123; console.log(&#39;accelerometer notificaions stopped&#39;); setNotificationsStatus(false); accelerometer_data.removeEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Could not stop accelerometer_data notifications: &#39; + error); &#125;); &#125;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;h2&gt; Status&lt;&#x2F;h2&gt;&lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;!--表格的第一行 --&gt; &lt;td&gt;&lt;b&gt;Connected&lt;&#x2F;b&gt;&lt;&#x2F;td&gt; &lt;td&gt;&lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt;&lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Notifications&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;!--表格的第二行 --&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt; false &lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt; false &lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_notifications&quot;&gt;false&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;h2&gt; Device Discovery Or Disconnect &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;&#x2F;h2 &gt;&lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;&#x2F;button&gt;&lt;hr&gt;&lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt;&lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt;&lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt;&lt;h3&gt;Read Characteristic - Model Number&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model Number&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt; &lt;hr&gt; &lt;h2&gt;Notifications - Accelerometer X, Y, Z&lt;&#x2F;h2&gt; &lt;button id&#x3D;&quot;btn_notify&quot; onclick&#x3D;&quot;toggleAccelerometerNotifications()&quot;&gt;Toggle Notifications&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;accelerometer_data&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 观察现象 图上的状态差不多是板子在水平状态下的值。","categories":[],"tags":[]},{"title":"蓝牙设备","slug":"蓝牙设备","date":"2020-06-22T13:05:58.000Z","updated":"2020-06-22T13:06:35.605Z","comments":true,"path":"2020/06/22/蓝牙设备/","link":"","permalink":"http://yoursite.com/2020/06/22/%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/","excerpt":"","text":"代码部分: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F; 保存用户选择的蓝牙设备 var connected_server; &#x2F;&#x2F;在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected&#x3D;false; &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123;acceptAllDevices:true&#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt;&#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); connected_server &#x3D; server; setConnectedStatus(true); &#125;, function(error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;; &#125; &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;h2&gt;Device Discovery &lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevices()&quot;&gt; Start scan &lt;&#x2F;button&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 调用谷歌浏览器的内置蓝牙功能搜索周边设备找到自己的设备名，然后在网页的JS里面调用蓝牙的库函数搜索蓝牙设备，然后在蓝牙设备列表里面找到自己的设备，点击连接表格里面的连接状态就变成TRUE.","categories":[],"tags":[]},{"title":"服务特性","slug":"服务特性","date":"2020-06-22T13:04:57.000Z","updated":"2020-06-24T13:11:58.870Z","comments":true,"path":"2020/06/22/服务特性/","link":"","permalink":"http://yoursite.com/2020/06/22/%E6%9C%8D%E5%8A%A1%E7%89%B9%E6%80%A7/","excerpt":"","text":"代码部分: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var connected_server; var connected&#x3D;false; var services_discovered &#x3D;false; &#x2F;&#x2F;在第五节课上添加 &#x2F;&#x2F;在第5课上添加以下内容 &#x2F;&#x2F; presence of services and characteristics var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false; var has_led_matrix_state &#x3D; false; var has_device_information_service &#x3D; false; var has_model_number_string &#x3D; false; var has_temperature_service &#x3D; false; var has_temperature &#x3D; false; &#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE &#x3D; &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE&#x3D;&#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; cached characteristics var accelerometer_data; var accelerometer_data; var led_matrix_state; var model_number_string; var temperature; &#x2F;&#x2F; var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverDevicesOrDisconnect() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); console.log(&quot;光芒万丈小太阳&quot;) if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;onDisconnected&quot;) resetUI(); &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#x2F;&#x2F;在第二课基础上添加的函数 &#125;) .catch(error &#x3D;&gt;&#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected); connected_server &#x3D; server; discoverSvcsAndChars(); setConnectedStatus(true); &#125;, function(error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered &#x3D; status; document.getElementById(&#39;status_discovered&#39;).innerHTML &#x3D; status; &#125; function resetUI() &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices() .then(services &#x3D;&gt; &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; has_temperature_service &#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#123; has_temperature_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; characteristics.forEach(characteristic &#x3D;&gt; &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_number_string &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; TEMPERATURE) &#123; temperature &#x3D; characteristic; has_temperature &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F; setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i&#x3D;0; function randomLEDs() &#x2F;&#x2F;第6课上添加 &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array &#x3D; [0, 0, 0, 0, 0]; var led_array2 &#x3D;[[12,2,12,2,12],[4,10,2,4,14],[4,12,4,4,14],[0,10,21,10,4],[10,21,17,10,4]]; &#x2F;&#x2F; Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array&#x3D;led_array2[i%5]; i++; &#x2F;*led_array[0] &#x3D; led_array2[i][1]; led_array[1] &#x3D; led_array2[i][1]; led_array[2] &#x3D; led_array2[i][2]; led_array[3] &#x3D; led_array2[i][3]; led_array[4] &#x3D; led_array2[i][4];*&#x2F; &#x2F;* led_array[0] &#x3D; 10;&#x2F;&#x2F;Math.floor(Math.random() * 32); led_array[1] &#x3D; 21; led_array[2] &#x3D; 17; led_array[3] &#x3D; 10; led_array[4] &#x3D; 4; *&#x2F; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h1&gt;Web Bluetooth&lt;&#x2F;h1&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;hr&gt; &lt;h2&gt;Device Discovery Or Disconnect&lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevicesOrDisconnect()&quot;&gt; Discover Devices &lt;&#x2F;button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt; &lt;hr&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 本次课程，要求的是增加温度服务特性，首先在sig web 上下载蓝牙温度服务程序，具体代码如上","categories":[],"tags":[]},{"title":"读写特性","slug":"读写特性","date":"2020-06-22T13:03:31.000Z","updated":"2020-06-22T13:04:42.345Z","comments":true,"path":"2020/06/22/读写特性/","link":"","permalink":"http://yoursite.com/2020/06/22/%E8%AF%BB%E5%86%99%E7%89%B9%E6%80%A7/","excerpt":"","text":"代码部分: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328&lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F; 保存用户选择的蓝牙设备 var connected_server; &#x2F;&#x2F;在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected &#x3D; false; &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 var services_discovered &#x3D; false; &#x2F;&#x2F;在第五节课上添加 &#x2F;&#x2F;在第5课上添加以下内容 &#x2F;&#x2F; presence of services and characteristics var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false; var has_led_matrix_state &#x3D; false; var has_device_information_service &#x3D; false; var has_model_number_string &#x3D; false; var has_temperature_service &#x3D; false; var has_temperature &#x3D; false; &#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE &#x3D; &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE &#x3D; &#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; cached characteristics var accelerometer_data; var accelerometer_data; var led_matrix_state; var model_number_string; var temperature; &#x2F;&#x2F; var service_count; var services_discovered; var characteristics_discovered; var characteristic_count; function discoverDevicesOrDisconnect() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); console.log(&quot;光芒万丈小太阳&quot;) if (!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;onDisconnected&quot;) resetUI(); &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123; acceptAllDevices: true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE, TEMPERATURE_SERVICE ] &#x2F;&#x2F;在第5节课上添加 &#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#x2F;&#x2F;在第二课基础上添加的函数 &#125;) .catch(error &#x3D;&gt; &#123; alert(&#39;ERROR:&#39; + error); console.log(&#39;ERROR:&#39; + error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;, onDisconnected); connected_server &#x3D; server; discoverSvcsAndChars(); setConnectedStatus(true); &#125;, function (error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected &#x3D; status; document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status; if (status &#x3D;&#x3D; true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered &#x3D; status; document.getElementById(&#39;status_discovered&#39;).innerHTML &#x3D; status; &#125; function resetUI() &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices() .then(services &#x3D;&gt; &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; has_temperature_service &#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#123; has_temperature_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; characteristics.forEach(characteristic &#x3D;&gt; &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_number_string &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; TEMPERATURE) &#123; temperature &#x3D; characteristic; has_temperature &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F; setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i &#x3D; 0; function randomLEDs() &#x2F;&#x2F;第6课上添加 &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array &#x3D; [0, 0, 0, 0, 0]; var led_array2 &#x3D; [ [12, 2, 12, 2, 12], [4, 10, 2, 4, 14], [4, 12, 4, 4, 14], [0, 10, 21, 10, 4], [10, 21, 17, 10, 4] ]; &#x2F;&#x2F; Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array &#x3D; led_array2[i % 5]; i++; &#x2F;*led_array[0] &#x3D; led_array2[i][1]; led_array[1] &#x3D; led_array2[i][1]; led_array[2] &#x3D; led_array2[i][2]; led_array[3] &#x3D; led_array2[i][3]; led_array[4] &#x3D; led_array2[i][4];*&#x2F; &#x2F;* led_array[0] &#x3D; 10;&#x2F;&#x2F;Math.floor(Math.random() * 32); led_array[1] &#x3D; 21; led_array[2] &#x3D; 17; led_array[3] &#x3D; 10; led_array[4] &#x3D; 4; *&#x2F; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; function readModelNumber() &#123; console.log(&quot;readModelNumber&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service &quot;); return; &#125; if (!has_model_number_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic &quot;); return; &#125; model_number_string.readValue() .then(value &#x3D;&gt; &#123; data &#x3D; new Uint8Array(value.buffer); model_number_string &#x3D; new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; &lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;h1&gt;Web Bluetooth&lt;&#x2F;h1&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;hr&gt; &lt;h2&gt;Device Discovery Or Disconnect&lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevicesOrDisconnect()&quot;&gt; Discover Devices &lt;&#x2F;button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt; &lt;h3&gt;Read Characteristic - Model Number&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model Number&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt; &lt;hr&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 首先添加一个读写按钮，接着添加读取型号函数，再添加改变LED的写函数 当点Read MOdel Number执行读取型号函数在下方显示型号，点击Randomise LED 板子上面LED发生改变","categories":[],"tags":[]},{"title":"网页蓝牙设备连接","slug":"网页蓝牙设备连接","date":"2020-06-22T13:02:26.000Z","updated":"2020-06-22T13:03:04.193Z","comments":true,"path":"2020/06/22/网页蓝牙设备连接/","link":"","permalink":"http://yoursite.com/2020/06/22/%E7%BD%91%E9%A1%B5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"知识储备Micro:bit是由英国BBC公司(对，你没有看错，就是那个被拍纪录片耽误的科技公司BBC)推出的面向青少年编程教育的微型计算机，别看它身材不大，但麻雀虽小五脏俱全，一块小板子上集成了加速度传感器，磁力传感器，两个可编程按钮，25个单色led，蓝牙等常用传感器设备，而尺寸只有信用卡的一半大小，采用micro usb口供电，可外接电池盒，在底部还有多个环孔连接器，可用于控制外接设备。 步骤一、micro:bit在电脑上的连接 先将板子通过usb口连接到电脑 在官网上下载测试程序 下载程序完成后，将程序拖入测试板所在的盘内，此时会发现板子上出现” Hi ! “的标识，则表示成功 二、蓝牙的连接 使用Visual Studio Code软件创建新的html文件，在文件中输入以下代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F; 保存用户选择的蓝牙设备 var connected_server; &#x2F;&#x2F;在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected&#x3D;false; &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123;acceptAllDevices:true&#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt;&#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); connected_server &#x3D; server; setConnectedStatus(true); &#125;, function(error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;; &#125; &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;h2&gt;Device Discovery &lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevices()&quot;&gt; Start scan &lt;&#x2F;button&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 保存成功之后，使用Google Chrome打开文件，出现以下界面 点击Start scan按钮，找到自己的设备点击连接配对 配对成功，连接成功后，Connected为true，板子显示从D变为C。 到此就结束了项目二的第一项功能。","categories":[],"tags":[]},{"title":"Markdown 语法","slug":"Markdown-语法","date":"2020-05-26T08:09:33.000Z","updated":"2020-05-26T08:10:07.653Z","comments":true,"path":"2020/05/26/Markdown-语法/","link":"","permalink":"http://yoursite.com/2020/05/26/Markdown-%E8%AF%AD%E6%B3%95/","excerpt":"","text":"标题一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。注:标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。 示例: 一级标题二级标题三级标题四级标题五级标题六级标题斜体斜体要倾斜的文字左右分别用一个*号包起来 斜体加粗要倾斜和加粗的文字左右分别用三个*号包起来 删除线要加删除线的文字左右分别用两个~~号包起来 示例: 这是加粗的文字 这是倾斜的文字` 这是斜体加粗的文字\\ 这是加删除线的文字 列表无序列表使用-、+和*作为列表标记： Red Green Blue Red Green Blue Red Green Blue有序列表则使用数字加英文句点.来表示： Red Green Blue 引用引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。 这是一段引用 //在&gt;后面有 1 个空格 1这是引用的代码块形式 &#x2F;&#x2F;在&#96;&gt;&#96;后面有 5 个空格 代码例子： 1234protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);&#125; 一级引用 二级引用 三级引用 这是一个四级标题 这是第一行列表项 这是第二行列表项 强调两个或-代表加粗，一个或-代表斜体，~~代表删除。加粗文本 或者 加粗文本 斜体文本 或者斜体文本 删除文本 图片与链接图片与链接的语法很像，区别在一个 ! 号。二者格式：图片：) 链接： 链接文本链接又分为行内式、参考式和 自动链接：这是行内式链接：ConnorLin’s Blog。 这是参考式链接：ConnorLin’s Blog，其中url为链接标记，可置于文中任意位置。 链接标记格式为：[链接标记文本]: 链接地址 链接title(可忽略) 这是自动链接：直接使用&lt;&gt;括起来http://connorlin.github.io 这是图片： 代码代码分为行内代码和代码块。 行内代码使用 代码 标识，可嵌入文字中 代码块使用4个空格或```标识 1这里是代码 代码语法高亮在 ```后面加上空格和语言名称即可 12&#x2F;&#x2F;注意语言前面有空格这里是代码 例如：这是行内代码onCreate(Bundle savedInstanceState)的例子。 这是代码块和语法高亮： 12345// 注意java前面有空格protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);&#125; 表格表格对齐格式 居左：:—-居中：:—-:或—–居右：—-:|标题|标题|标题||:—|:—:|—:||居左测试文本|居中测试文本|居右测试文本||居左测试文本1|居中测试文本2|居右测试文本3||居左测试文本11|居中测试文本22|居右测试文本33||居左测试文本111|居中测试文本222|居右测试文本333| #分隔线在一行中用三个以上的*、-、_来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。 换行在行尾添加两个空格加回车表示换行：这是一行后面加两个空格 换行 注解使用[^]来定义脚注：这是一个脚注的例子^1 下划线","categories":[],"tags":[]},{"title":"一首诗词","slug":"一首诗词","date":"2020-02-23T13:10:39.000Z","updated":"2020-06-23T13:10:57.810Z","comments":true,"path":"2020/02/23/一首诗词/","link":"","permalink":"http://yoursite.com/2020/02/23/%E4%B8%80%E9%A6%96%E8%AF%97%E8%AF%8D/","excerpt":"","text":"诗词一首 2020-05-27 望明月，今生酒醒何处。 故园游，无所非。 秋生哀嘁鸟自悲。 悲极是，无言情，无我是西东。","categories":[],"tags":[]},{"title":"hexo超完整的搭建教程，让你拥有一个专属个人博客","slug":"hexo超完整的搭建教程，让你拥有一个专属个人博客","date":"2020-01-23T13:08:52.000Z","updated":"2020-06-23T13:09:52.071Z","comments":true,"path":"2020/01/23/hexo超完整的搭建教程，让你拥有一个专属个人博客/","link":"","permalink":"http://yoursite.com/2020/01/23/hexo%E8%B6%85%E5%AE%8C%E6%95%B4%E7%9A%84%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%8C%E8%AE%A9%E4%BD%A0%E6%8B%A5%E6%9C%89%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"现在市面上的博客很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的各种限制和恶心的广告。 而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我们大多数人来说，实在是没有这样的精力和时间。 那么就有第三种选择，直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。 Hexo简介Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。 教程分三个部分， 第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。 第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流 第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。 第一部分hexo的初级搭建还有部署到github page上，以及个人域名的绑定。 Hexo搭建步骤 安装Git 安装Node.js 安装Hexo GitHub创建个人仓库 生成SSH添加到GitHub 将hexo部署到GitHub 设置个人域名 发布文章 1. 安装GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。Git教程 windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。 linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码 1sudo apt-get install git 安装好后，用git --version 来查看一下版本 2. 安装nodejsHexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。 windows：nodejs选择LTS版本就行了。 linux： 12sudo apt-get install nodejssudo apt-get install npm 安装完后，打开命令行 12node -vnpm -v 检查一下有没有安装成功 顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。 3. 安装hexo前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 输入命令 1npm install -g hexo-cli 依旧用hexo -v查看一下版本 至此就全部安装完了。 接下来初始化一下hexo 1hexo init myblog 这个myblog可以自己取什么名字都行，然后 12cd myblog //进入这个myblog文件夹npm install 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 ** _config.yml: 博客的配置文件** 12hexo ghexo server 打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。 大概长这样： 使用ctrl+c可以把服务关掉。 4. GitHub创建个人仓库首先，你先要有一个GitHub账户，去注册一个吧。 注册完登录后，在http://GitHub.com中看到一个New repository，新建仓库 创建一个和你用户名相同的仓库，后面加.http://github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是http://xxxx.github.io，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。 点击create repository。 5. 生成SSH添加到GitHub回到你的git bash中， 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。 可以用以下两条，检查一下你有没有输对 12git config user.namegit config user.email 然后创建SSH,一路回车 1ssh-keygen -t rsa -C &quot;youremail&quot; 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的id_rsa.pub里面的信息复制进去。 在gitbash中，查看是否成功 1ssh -T git@github.com 6. 将hexo部署到GitHub这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为 YourgithubName就是你的GitHub账户 1234deploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git branch: master 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 1npm install hexo-deployer-git --save 然后 123hexo cleanhexo generatehexo deploy 其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写 hexo deploy 部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 得到下图就说明部署成功了，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了！！ 7. 设置个人域名现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。 注册一个阿里云账户,在阿里云上买一个域名，我买的是 fangzh.top，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。 你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。 点解析进去，添加解析。 其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。 注意，解析线路选择默认，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择默认！！ 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名fangzh.top 然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。 最后，在gitbash中，输入 123hexo cleanhexo ghexo d 过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！ 接下来你就可以正式开始写文章了。 1hexo new newpapername 然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再 123hexo cleanhexo ghexo d 第二部分hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流。 1. hexo基本配置在文件根目录下的_config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 网站参数描述title网站标题subtitle网站副标题description网站描述author您的名字language网站使用的语言timezone网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 网址参数描述url网址root网站根目录permalink文章的 永久链接 格式permalink_defaults永久链接中各部分的默认值 在这里，你需要把url改成你的网站域名。 permalink，也就是你生成某个文章时的那个链接格式。 比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是http://yoursite.com/2018/09/05/temp。 以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 永久链接 。 参数结果:year/:month/:day/:title/2013/07/14/hello-world:year-:month-:day-:title.html2013-07-14-hello-world.html:category/:titlefoo/bar/hello-world 再往下翻，中间这些都默认就好了。 12345678theme: landscape# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy: type: git repo: &lt;repository url&gt; branch: [branch] theme就是选择什么主题，也就是在theme这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在theme文件夹下，再修改这个参数就可以了。 接下来这个deploy就是网站的部署的，repo就是仓库(Repository)的简写。branch选择仓库的哪个分支。这个在之前进行github page部署的时候已经修改过了，不再赘述。而这个在后面进行双平台部署的时候会再次用到。 Front-matterFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说： 123title: Hello Worlddate: 2013&#x2F;7&#x2F;13 20:46:25--- 下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 参数描述layout布局title标题date建立日期updated更新日期comments开启文章的评论功能tags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址 其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。 12345categories:- Diarytags:- PS3- Games layout（布局）当你每一次使用代码 1hexo new paper 它其实默认使用的是post这个布局，也就是在source文件夹下的_post里面。 Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。 布局路径postsource/_postspagesourcedraftsource/_drafts 而new这个命令其实是： 1hexo new [layout] &lt;title&gt; 只不过这个layout默认是post罢了。 page如果你想另起一页，那么可以使用 1hexo new page board 系统会自动给你在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是http://xxx.xxx/board draftdraft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以 1hexo new draft newpage 这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用 1hexo server --draft 在本地端口中开启服务预览。 如果你的草稿文件写完了，想要发表到post中， 1hexo publish draft newpage 就会自动把newpage.md发送到post中。 2. 更换主题到这一步，如果你觉得默认的landscape主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。点这里 这里有200多个主题可以选。不过最受欢迎的就是那么几个，比如NexT主题，非常的简洁好看，大多数人都选择这个，关于这个的教程也比较多。不过我选择的是hueman这个主题，好像是从WordPress移植过来的，展示效果如下： 不管怎么样，至少是符合我个人的审美。 直接在github链接上下载下来，然后放到theme文件夹下就行了，然后再在刚才说的配置文件中把theme换成那个主题文件夹的名字，它就会自动在theme文件夹中搜索你配置的主题。 而后进入hueman这个文件夹，可以看到里面也有一个配置文件_config.xml，貌似它默认是_config.xml.example，把它复制一份，重命名为_config.xml就可以了。这个配置文件是修改你整个主题的配置文件。 menu（菜单栏）也就是上面菜单栏上的这些东西。 其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令 1hexo new page about 它就会在根目录下source文件夹中新建了一个about文件夹，以及index.md，在index.md中写上你想要写的东西，就可以在网站上展示出来了。 如果你想要自己再自定义一个菜单栏的选项，那么就 1hexo new page yourdiy 然后在主题配置文件的menu菜单栏添加一个 Yourdiy : /yourdiy，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在languages文件夹中，找到zh-CN.yml，在index中添加yourdiy: &#39;中文意思&#39;就可以显示中文了。 customize(定制)在这里可以修改你的个人logo，默认是那个hueman，在source/css/images文件夹中放入自己要的logo，再改一下url的链接名字就可以了。 favicon是网站中出现的那个小图标的icon，找一张你喜欢的logo，然后转换成ico格式，放在images文件夹下，配置一下路径就行。 social_links ，可以显示你的社交链接，而且是有logo的。 tips: 在这里可以添加一个rss功能，也就是那个符号像wifi一样的东西。 添加RSS1. 什么是RSS？ RSS也就是订阅功能，你可以理解为类似与订阅公众号的功能，来订阅各种博客，杂志等等。 2. 为什么要用RSS？ 就如同订阅公众号一样，你对某个公众号感兴趣，你总不可能一直时不时搜索这个公众号来看它的文章吧。博客也是一样，如果你喜欢某个博主，或者某个平台的内容，你可以通过RSS订阅它们，然后在RSS阅读器上可以实时推送这些消息。现在网上的垃圾消息太多了，如果你每一天都在看这些消息中度过，漫无目的的浏览，只会让你的时间一点一点的流逝，太不值得了。如果你关注的博主每次都发的消息都是精华，而且不是每一天十几条几十条的轰炸你，那么这个博主就值得你的关注，你就可以通过RSS订阅他。 在我的理解中，如果你不想每天都被那些没有质量的消息轰炸，只想安安静静的关注几个博主，每天看一些有质量的内容也不用太多，那么RSS订阅值得你的拥有。 3. 添加RSS功能 先安装RSS插件 1npm i hexo-generator-feed 而后在你整个项目的_config.yml中找到Extensions，添加： 12345678910# Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed: type: atom path: atom.xml limit: 20 这个时候你的RSS链接就是 域名/atom.xml了。 所以，在主题配置文件中的这个social links，开启RSS的页面功能，这样你网站上就有那个像wifi一样符号的RSS logo了，注意空格。 1rss: &#x2F;atom.xml 4. 如何关注RSS？ 首先，你需要一个RSS阅读器，在这里我推荐inoreader，宇宙第一RSS阅读器，而且中文支持的挺好。不过它没有PC端的程序，只有网页版，chrome上有插件。在官网上用google账号或者自己注册账号登录，就可以开始你的关注之旅了。 每次需要关注某个博主时，就点开他的RSS链接，把链接复制到inoreader上，就能关注了，当然，如果是比较大众化的很厉害的博主，你直接搜名字也可以的，比如每个人都非常佩服的阮一峰大师，直接在阅读器上搜索阮一峰，应该就能出来了。 我关注的比如，阮一峰的网络日志，月光博客，知乎精选等，都很不错。当然，还有我！！赶快关注我吧！你值得拥有：http://fangzh.top/atom.xml 在安卓端，inoreader也有下载，不过因为国内google是登录不了的，你需要在inoreader官网上把你的密码修改了，然后就可以用账户名和密码登录了。 在IOS端，没用过，好像是reader 3可以支持inoreader账户，还有个readon也不错，可以去试试。 widgets(侧边栏)侧边栏的小标签，如果你想自己增加一个，比如我增加了一个联系方式，那么我把communication写在上面，在zh-CN.yml中的sidebar，添加communication: &#39;中文&#39;。 然后在hueman/layout/widget中添加一个communicaiton.ejs，填入模板： 12345678&lt;% if (site.posts.length) &#123; %&gt; &lt;div class=\"widget-wrap widget-list\"&gt; &lt;h3 class=\"widget-title\"&gt;&lt;%= __('sidebar.communiation') %&gt;&lt;/h3&gt; &lt;div class=\"widget\"&gt; &lt;!--这里添加你要写的内容--&gt; &lt;/div&gt; &lt;/div&gt;&lt;% &#125; %&gt; search(搜索框)默认搜索框是不能够用的， you need to install hexo-generator-json-content before using Insight Search 它已经告诉你了，如果想要使用，就安装这个插件。 comment(评论系统)这里的多数都是国外的，基本用不了。这个valine好像不错，还能统计文章阅读量，可以自己试一试，链接。 miscellaneous(其他)这里我就改了一个links，可以添加友链。注意空格要对！不然会报错！ 总结：整个主题看起来好像很复杂的样子，但是仔细捋一捋其实也比较流畅， languages: 顾名思义 layout：布局文件，其实后期想要修改自定义网站上的东西，添加各种各样的信息，主要是在这里修改，其中comment是评论系统，common是常规的布局，最常修改的在这里面，比如修改页面head和footer的内容。 scripts：js脚本，暂时没什么用 source：里面放了一些css的样式，以及图片 3. git分支进行多终端工作问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？ 在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。 机制机制是这样的，由于hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。 也就是上传的是在本地目录里自动生成的.deploy_git里面。 其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github 所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。 上传分支首先，先在github上新建一个hexo分支，如图： 然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。 然后在本地的任意目录下，打开git bash， 1git clone git@github.com:ZJUFangzh&#x2F;ZJUFangzh.github.io.git 将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。 接下来在克隆到本地的ZJUFangzh.github.io中，把除了.git 文件夹外的所有文件都删掉 把之前我们写的博客源文件全部复制过来，除了.deploy_git。这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git： 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules&#x2F;public&#x2F;.deploy*&#x2F; 注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。 而后 123git add .git commit –m &quot;add branch&quot;git push 这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中node_modules、public、db.json已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。 这样就上传完了。 更换电脑操作一样的，跟之前的环境搭建一样， 安装git 1sudo apt-get install git 设置git全局邮箱和用户名 12git config --global user.name &quot;yourgithubname&quot;git config --global user.email &quot;yourgithubemail&quot; 设置ssh key 12345ssh-keygen -t rsa -C &quot;youremail&quot;#生成后填到github和coding上（有coding平台的话）#验证是否成功ssh -T git@github.comssh -T git@git.coding.net #(有coding平台的话) 安装nodejs 12sudo apt-get install nodejssudo apt-get install npm 安装hexo 1sudo npm install hexo-cli -g 但是已经不需要初始化了， 直接在任意文件夹下， 1git clone git@……………… 然后进入克隆到的文件夹： 123cd xxx.github.ionpm installnpm install hexo-deployer-git --save 生成，部署： 12hexo ghexo d 然后就可以开始写你的新博客了 1hexo new newpage Tips: 不要忘了，每次写完最好都把源文件上传一下 123git add .git commit –m &quot;xxxx&quot;git push 如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了 1git pull 4. coding page上部署实现国内外分流之前我们已经把hexo托管在github了，但是github是国外的，而且百度的爬虫是不能够爬取github的，所以如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page。 1. 申请coding账户，新建项目 先申请一个账户，然后创建新的项目，这一步项目名称应该是随意的。 2. 添加ssh key 这一步跟github一样。 添加后，检查一下是不是添加成功 1ssh -T git@git.coding.net 3. 修改_config.yml hexo官方文档是这样的： 123456deploy: type: git message: [message] repo: github: &lt;repository url&gt;,[branch] coding: &lt;repository url&gt;,[branch] 那么，我们只需要： 12345deploy: type: git repo: coding: git@git.coding.net:ZJUFangzh&#x2F;ZJUFangzh.git,master github: git@github.com:ZJUFangzh&#x2F;ZJUFangzh.github.io.git,master 4. 部署 保存一下，直接 12hexo ghexo d 这样就可以在coding的项目上看到你部署的文件了。 5. 开启coding pages服务，绑定域名 如图： 6. 阿里云添加解析 这个时候就可以把之前github的解析改成境外，把coding的解析设为默认了。 7. 去除coding page的跳转广告 coding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到pages服务这里。 这里： 只要你在页面上添加一行文字，写Hosted by Coding Pages，然后点下面的小勾勾，两个工作日内它就会审核通过了。 1&lt;p&gt;Hosted by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pages.coding.me&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Coding Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt; 我的选择是把这一行代码放在主题文件夹/layout/common/footer.ejs里面，也就是本来在页面中看到的页脚部分。 当然，为了统一，我又在后面加上了and Github哈哈，可以不加。 1&lt;p&gt;&lt;span&gt;Hosted by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pages.coding.me&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Coding Pages&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; and &lt;span&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&quot; style&#x3D;&quot;font-weight: bold&quot;&gt;Github&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt; 这是最终加上去的代码。 第三部分hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。 这一部分参考了: visugar.com这里面说的很详细了。 1. SEO优化推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。 SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。 百度seo刚建站的时候是没有搜索引擎收录我们的网站的。可以在搜索引擎中输入site:&lt;域名&gt; 来查看一下。 1. 登录百度站长平台添加网站 登录百度站长平台，在站点管理中添加你自己的网站。 验证网站有三种方式：文件验证、HTML标签验证、CNAME验证。 第三种方式最简单，只要将它提供给你的那个xxxxx使用CNAME解析到http://xxx.baidu.com就可以了。也就是登录你的阿里云，把这个解析填进去就OK了。 2. 提交链接 我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎 12npm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --save 这时候你需要在你的根目录下_config.xml中看看url有没有改成你自己的： 重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml了。 然后就可以向百度提交你的站点地图了。 这里建议使用自动提交。 自动提交又分为三种：主动推送、自动推送、sitemap。 可以三个一起提交不要紧，我选择的是后两种。 自动推送：把百度生成的自动推送代码，放在主题文件/layout/common/head.ejs的适当位置，然后验证一下就可以了。 sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了。 ps: 百度收录比较慢，慢慢等个十天半个月再去site:&lt;域名&gt;看看有没有被收录。 google的SEO流程一样，google更简单，而且收录更快，进入google站点地图，提交网站和sitemap.xml，就可以了。 如果你这个域名在google这里出了问题，那你就提交 http://yourname.github.io，这个链接，效果是一样的。 不出意外的话一天内google就能收录你的网站了。 其他的搜索，如搜狗搜索，360搜索，流程是一样的，这里就不再赘述。 2. 评论系统评论系统有很多，但是很多都是墙外的用不了，之前说过这个valine好像集成在hueman和next主题里面了，但是我还没有研究过，我看的是visugar这个博主用的来比力评论系统，感觉也还不错。 来比力官网，注册好后，点击管理页面，在代码管理中找到安装代码： 获取安装代码后，在主题的comment下新建一个文件放入刚刚那段代码，再找到article文件，找到如下代码，若没有则直接在footer后面添加即可。livebe即为刚刚所创文件名称。 1&lt;%- partial(&#39;comment&#x2F;livebe&#39;) %&gt; 然后可以自己设置一些东西： 还可以设置评论提醒，这样别人评论你的时候就可以及时知道了。 3. 添加百度统计百度统计可以在后台上看到你网站的访问数，浏览量，浏览链接分布等很重要的信息。所以添加百度统计能更有效的让你掌握你的网站情况。 百度统计，注册一下，这里的账号好像和百度账号不是一起的。 照样把代码复制到head.ejs文件中，然后再进行一下安装检查，半小时左右就可以在百度统计里面看到自己的网站信息了。 4. 文章阅读量统计leanCloudleanCloud，进去后注册一下，进入后创建一个应用： 在存储中创建Class，命名为Counter, 然后在设置页面看到你的应用Key，在主题的配置文件中： 1234leancloud_visitors: enable: true app_id: 你的id app_key: 你的key 在article.ejs中适当的位置添加如下，这要看你让文章的阅读量统计显示在哪个地方了， 1阅读数量:&lt;span id&#x3D;&quot;&lt;%&#x3D; url_for(post.path) %&gt;&quot; class&#x3D;&quot;leancloud_visitors&quot; data-flag-title&#x3D;&quot;&lt;%- post.title %&gt;&quot;&gt;&lt;&#x2F;span&gt;次 然后在footer.ejs的最后，添加： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn1.lncld.net&#x2F;static&#x2F;js&#x2F;2.5.0&#x2F;av-min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt; var APP_ID &#x3D; &#39;你的app id&#39;; var APP_KEY &#x3D; &#39;你的app key&#39;; AV.init(&#123; appId: APP_ID, appKey: APP_KEY &#125;); &#x2F;&#x2F; 显示次数 function showTime(Counter) &#123; var query &#x3D; new AV.Query(&quot;Counter&quot;); if($(&quot;.leancloud_visitors&quot;).length &gt; 0)&#123; var url &#x3D; $(&quot;.leancloud_visitors&quot;).attr(&#39;id&#39;).trim(); &#x2F;&#x2F; where field query.equalTo(&quot;words&quot;, url); &#x2F;&#x2F; count query.count().then(function (number) &#123; &#x2F;&#x2F; There are number instances of MyClass where words equals url. $(document.getElementById(url)).text(number? number : &#39;--&#39;); &#125;, function (error) &#123; &#x2F;&#x2F; error is an instance of AVError. &#125;); &#125; &#125; &#x2F;&#x2F; 追加pv function addCount(Counter) &#123; var url &#x3D; $(&quot;.leancloud_visitors&quot;).length &gt; 0 ? $(&quot;.leancloud_visitors&quot;).attr(&#39;id&#39;).trim() : &#39;icafebolger.com&#39;; var Counter &#x3D; AV.Object.extend(&quot;Counter&quot;); var query &#x3D; new Counter; query.save(&#123; words: url &#125;).then(function (object) &#123; &#125;) &#125; $(function () &#123; var Counter &#x3D; AV.Object.extend(&quot;Counter&quot;); addCount(Counter); showTime(Counter); &#125;);&lt;&#x2F;script&gt; 重新部署后就可以了。 5. 引入不蒜子访问量和访问人次统计不蒜子的添加非常非常方便，不蒜子 在footer.ejs中的合适位置，看你要显示在哪个地方，添加： 1234&lt;!--这一段是不蒜子的访问量统计代码--&gt;&lt;script async src&#x3D;&quot;&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;&lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次 &amp;nbsp; &lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人次&lt;&#x2F;span&gt; 就可以了。 总结到这里就基本做完了。其实都是参考别的博主的设置的，不一定仅限于hueman主题，其他主题的设置也是大体相同的，所以如果你希望设置别的主题，那么仔细看一下这个主题的代码结构，也能够把上边的功能添加进去。 多看看别的博主的那些功能，如果有你能找到自己喜欢的功能，那么好好发动搜索技能，很快就能找到怎么做了。加油吧！","categories":[],"tags":[]}],"categories":[],"tags":[]}